generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id              String         @id @default(uuid())
  officeId        String
  line1           String
  line2           String?
  city            String
  state           String
  zipCode         String
  country         String
  telephoneNumber String         @default("")
  addressType     AddressType    @default(Other)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  quickbooksId    String?
  deleted         Boolean        @default(false)
  line3           String?
  line4           String?
  name            String?
  Office          Office         @relation(fields: [officeId], references: [id])
  ShippingInfo    ShippingInfo[]

  @@index([officeId, addressType, quickbooksId])
}

model Company {
  id           String   @id @default(uuid())
  name         String
  createdAt    DateTime @default(now())
  quickbooksId String?  @unique
  updatedAt    DateTime @default(now()) @updatedAt
  syncToken    String?
  deleted      Boolean  @default(false)
  isActive     Boolean  @default(true)
  Offices      Office[]

  @@unique([name, quickbooksId])
}

model Invoice {
  id              String           @id @default(uuid())
  invoiceNumber   String           @unique
  dateIssued      DateTime
  dateDue         DateTime
  subtotal        Decimal          @db.Decimal(10, 2)
  taxRate         Decimal          @db.Decimal(5, 2)
  taxAmount       Decimal          @db.Decimal(10, 2)
  total           Decimal          @db.Decimal(10, 2)
  status          InvoiceStatus    @default(Draft)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderId         String           @unique
  createdById     String
  quickbooksId    String?          @unique
  syncToken       String?
  createdBy       User             @relation(fields: [createdById], references: [id])
  Order           Order            @relation(fields: [orderId], references: [id])
  InvoiceItems    InvoiceItem[]
  InvoicePayments InvoicePayment[]
}

model InvoiceItem {
  id           String     @id @default(uuid())
  description  String     @default("")
  quantity     Int
  unitPrice    Decimal    @db.Decimal(10, 2)
  total        Decimal    @db.Decimal(10, 2)
  invoiceId    String
  orderItemId  String?
  quickbooksId String?
  syncToken    String?
  invoice      Invoice    @relation(fields: [invoiceId], references: [id])
  orderItem    OrderItem? @relation(fields: [orderItemId], references: [id])
}

model InvoicePayment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod PaymentMethod
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
}

model Office {
  id                   String           @id @default(uuid())
  companyId            String
  name                 String
  createdAt            DateTime         @default(now())
  createdById          String
  updatedAt            DateTime         @default(now()) @updatedAt
  quickbooksCustomerId String?          @unique
  syncToken            String?
  fullyQualifiedName   String?
  deleted              Boolean          @default(false)
  isActive             Boolean          @default(true)
  Addresses            Address[]
  Company              Company          @relation(fields: [companyId], references: [id])
  createdBy            User             @relation("CreatedBy", fields: [createdById], references: [id])
  Orders               Order[]
  ShippingInfo         ShippingInfo[]
  users                UsersOnOffices[]
  WorkOrders           WorkOrder[]

  @@index([companyId, quickbooksCustomerId])
}

model Order {
  id                  String                   @id @default(uuid())
  workOrderId         String                   @unique
  officeId            String
  status              OrderStatus              @default(Pending)
  deposit             Decimal                  @default(0) @db.Decimal(10, 2)
  version             Int                      @default(1)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  orderNumber         Int                      @default(autoincrement())
  shippingInfoId      String?
  dateInvoiced        DateTime?
  inHandsDate         DateTime?
  invoicePrintEmail   InvoicePrintEmailOptions @default(Both)
  createdById         String
  contactPersonId     String?
  pressRun            String?                  @default("")
  quickbooksInvoiceId String?                  @unique
  syncToken           String?
  Invoice             Invoice?
  contactPerson       User?                    @relation("OrderContactPerson", fields: [contactPersonId], references: [id])
  createdBy           User                     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  Office              Office                   @relation(fields: [officeId], references: [id])
  ShippingInfo        ShippingInfo?            @relation(fields: [shippingInfoId], references: [id])
  WorkOrder           WorkOrder                @relation(fields: [workOrderId], references: [id])
  OrderItems          OrderItem[]
  OrderNotes          OrderNote[]
  OrderPayments       OrderPayment[]
}

model OrderItem {
  id                  String              @id @default(uuid())
  orderId             String
  finishedQty         Int
  pressRun            String
  size                String?
  amount              Decimal?            @db.Decimal(10, 2)
  specialInstructions String?
  status              OrderItemStatus     @default(Pending)
  createdAt           DateTime            @default(now())
  createdById         String
  updatedAt           DateTime            @updatedAt
  description         String              @default("")
  expectedDate        DateTime            @default(now())
  cost                Decimal?            @db.Decimal(10, 2)
  prepTime            Int?
  other               String?
  shippingAmount      Decimal?            @db.Decimal(10, 2)
  quantity            Int                 @default(1)
  ink                 String?             @default("")
  orderItemNumber     Int                 @default(autoincrement())
  deleted             Boolean             @default(false)
  paperProductId      String?
  productTypeId       String?
  shippingInfoId      String?
  InvoiceItems        InvoiceItem[]
  createdBy           User                @relation(fields: [createdById], references: [id])
  Order               Order               @relation(fields: [orderId], references: [id])
  PaperProduct        PaperProduct?       @relation(fields: [paperProductId], references: [id])
  ProductType         ProductType?        @relation(fields: [productTypeId], references: [id])
  ShippingInfo        ShippingInfo?       @relation(fields: [shippingInfoId], references: [id])
  artwork             OrderItemArtwork[]
  OrderItemStock      OrderItemStock[]
  ProcessingOptions   ProcessingOptions[]
  Typesetting         Typesetting[]
}

model OrderPayment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod PaymentMethod
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
}

model OrderItemArtwork {
  id          String    @id @default(cuid())
  orderItemId String
  fileUrl     String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fileType    FileType  @default(Image)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
}

model OrderNote {
  id          String   @id @default(uuid())
  note        String
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  Order       Order    @relation(fields: [orderId], references: [id])
}

model OrderItemStock {
  id             String        @id @default(uuid())
  deleted        Boolean       @default(false)
  stockQty       Int
  costPerM       Decimal       @default(0) @db.Decimal(10, 2)
  totalCost      Decimal?      @db.Decimal(10, 2)
  from           String?
  expectedDate   DateTime?
  orderedDate    DateTime?
  received       Boolean       @default(false)
  receivedDate   DateTime?
  notes          String?
  stockStatus    StockStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderItemId    String
  createdById    String
  supplier       String?
  paperProductId String?
  createdBy      User          @relation(fields: [createdById], references: [id])
  OrderItem      OrderItem     @relation(fields: [orderItemId], references: [id])
  PaperProduct   PaperProduct? @relation(fields: [paperProductId], references: [id])
}

model PaperProduct {
  id                 String               @id @default(uuid())
  brand              PaperBrand           @default(Other)
  paperType          PaperType            @default(Other)
  finish             PaperFinish          @default(Other)
  weightLb           Int?
  caliper            Float?
  size               String?
  width              Float?
  height             Float?
  mWeight            Float?
  sheetsPerUnit      Int?
  referenceId        String?              @unique
  isHPIndigo         Boolean              @default(false)
  supplier           String               @default("")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deleted            Boolean              @default(false)
  customDescription  String?              @default("")
  OrderItem          OrderItem[]
  OrderItemStock     OrderItemStock[]
  WorkOrderItem      WorkOrderItem[]
  WorkOrderItemStock WorkOrderItemStock[]

  @@index([brand, paperType, finish, weightLb])
  @@index([size, weightLb, finish])
  @@index([referenceId])
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String @default("")
  Roles       Role[] @relation("PermissionToRole")
}

model ProcessingOptions {
  id              String         @id @default(uuid())
  cutting         String?
  padding         String?
  drilling        String?
  folding         String?
  other           String?
  numberingStart  Int?
  numberingEnd    Int?
  numberingColor  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orderItemId     String?
  workOrderItemId String?
  createdById     String
  description     String         @default("")
  stitching       String?
  binderyTime     Int?
  binding         BindingType?
  createdBy       User           @relation(fields: [createdById], references: [id])
  OrderItem       OrderItem?     @relation(fields: [orderItemId], references: [id])
  WorkOrderItem   WorkOrderItem? @relation(fields: [workOrderItemId], references: [id])
}

model ProductType {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String          @default("")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deleted       Boolean         @default(false)
  OrderItem     OrderItem[]
  WorkOrderItem WorkOrderItem[]
}

model Role {
  id          String       @id @default(uuid())
  name        RoleName     @unique
  description String       @default("")
  Permissions Permission[] @relation("PermissionToRole")
  Users       User[]       @relation("RoleToUser")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingInfo {
  id                 String           @id @default(uuid())
  instructions       String?
  shippingOther      String?
  shippingDate       DateTime?
  shippingMethod     ShippingMethod
  shippingCost       Decimal?         @db.Decimal(10, 2)
  officeId           String
  shipToSameAsBillTo Boolean          @default(false)
  attentionTo        String?
  addressId          String?
  createdAt          DateTime         @default(now())
  createdById        String
  updatedAt          DateTime         @updatedAt
  numberOfPackages   Int?             @default(1)
  shippingNotes      String?
  estimatedDelivery  DateTime?
  trackingNumber     String[]         @default([])
  Order              Order[]
  OrderItems         OrderItem[]
  Address            Address?         @relation(fields: [addressId], references: [id])
  createdBy          User             @relation(fields: [createdById], references: [id])
  Office             Office           @relation(fields: [officeId], references: [id])
  ShippingPickup     ShippingPickup[]
  WorkOrder          WorkOrder[]
  WorkOrderItems     WorkOrderItem[]
}

model ShippingPickup {
  id             String       @id @default(uuid())
  shippingInfoId String
  pickupDate     DateTime
  pickupTime     String
  notes          String?
  contactName    String
  contactPhone   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])
  ShippingInfo   ShippingInfo @relation(fields: [shippingInfoId], references: [id])
}

model Typesetting {
  id                 String              @id @default(uuid())
  dateIn             DateTime
  timeIn             String
  approved           Boolean             @default(false)
  prepTime           Int?
  plateRan           String?
  createdById        String
  orderItemId        String?
  workOrderItemId    String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  cost               Decimal?            @db.Decimal(10, 2)
  followUpNotes      String?
  status             TypesettingStatus   @default(InProgress)
  createdBy          User                @relation(fields: [createdById], references: [id])
  OrderItem          OrderItem?          @relation(fields: [orderItemId], references: [id])
  WorkOrderItem      WorkOrderItem?      @relation(fields: [workOrderItemId], references: [id])
  TypesettingOptions TypesettingOption[]
  TypesettingProofs  TypesettingProof[]
}

model TypesettingOption {
  id            String      @id @default(uuid())
  typesettingId String
  option        String
  selected      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  createdById   String
  updatedAt     DateTime    @updatedAt
  createdBy     User        @relation(fields: [createdById], references: [id])
  typesetting   Typesetting @relation(fields: [typesettingId], references: [id])

  @@unique([typesettingId, option])
}

model TypesettingProof {
  id            String                    @id @default(uuid())
  typesettingId String
  proofNumber   Int
  dateSubmitted DateTime?
  notes         String?
  approved      Boolean?
  createdAt     DateTime                  @default(now())
  createdById   String
  updatedAt     DateTime                  @updatedAt
  proofCount    Int
  proofMethod   ProofMethod               @default(Digital)
  createdBy     User                      @relation(fields: [createdById], references: [id])
  Typesetting   Typesetting               @relation(fields: [typesettingId], references: [id])
  artwork       TypesettingProofArtwork[]
}

model TypesettingProofArtwork {
  id                 String           @id @default(cuid())
  typesettingProofId String
  fileUrl            String
  description        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  typesettingProof   TypesettingProof @relation(fields: [typesettingProofId], references: [id])
}

model User {
  id                      String               @id @default(cuid())
  name                    String?
  email                   String?              @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @default(now())
  quickbooksAccessToken   String?
  quickbooksRealmId       String?
  quickbooksRefreshToken  String?
  quickbooksTokenExpiry   DateTime?
  quickbooksAuthState     String?
  deleted                 Boolean              @default(false)
  password                String?
  accounts                Account[]
  Invoice                 Invoice[]
  CreatedOffices          Office[]             @relation("CreatedBy")
  ContactPersonOrders     Order[]              @relation("OrderContactPerson")
  CreatedOrders           Order[]              @relation("OrderCreatedBy")
  OrderItem               OrderItem[]
  OrderItemStock          OrderItemStock[]
  OrderNote               OrderNote[]
  Posts                   Post[]
  ProcessingOptions       ProcessingOptions[]
  sessions                Session[]
  ShippingInfo            ShippingInfo[]
  ShippingPickup          ShippingPickup[]
  Typesetting             Typesetting[]
  TypesettingOption       TypesettingOption[]
  TypesettingProof        TypesettingProof[]
  offices                 UsersOnOffices[]
  ContactPersonWorkOrders WorkOrder[]          @relation("WorkOrderContactPerson")
  CreatedWorkOrders       WorkOrder[]          @relation("WorkOrderCreatedBy")
  WorkOrderItem           WorkOrderItem[]
  WorkOrderItemStock      WorkOrderItemStock[]
  WorkOrderNote           WorkOrderNote[]
  Roles                   Role[]               @relation("RoleToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkOrder {
  id                  String                   @id @default(uuid())
  officeId            String
  dateIn              DateTime
  inHandsDate         DateTime
  estimateNumber      String?
  purchaseOrderNumber String?
  version             Int                      @default(autoincrement())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  workOrderNumber     String                   @default(uuid())
  shippingInfoId      String?
  status              WorkOrderStatus          @default(Draft)
  invoicePrintEmail   InvoicePrintEmailOptions @default(Both)
  createdById         String
  contactPersonId     String?
  Order               Order?
  contactPerson       User?                    @relation("WorkOrderContactPerson", fields: [contactPersonId], references: [id])
  createdBy           User                     @relation("WorkOrderCreatedBy", fields: [createdById], references: [id])
  Office              Office                   @relation(fields: [officeId], references: [id])
  ShippingInfo        ShippingInfo?            @relation(fields: [shippingInfoId], references: [id])
  WorkOrderItems      WorkOrderItem[]
  WorkOrderNotes      WorkOrderNote[]
  WorkOrderVersions   WorkOrderVersion[]
}

model WorkOrderItem {
  id                  String                 @id @default(uuid())
  workOrderId         String?
  other               String?
  size                String?
  amount              Decimal?               @db.Decimal(10, 2)
  specialInstructions String?
  status              WorkOrderItemStatus    @default(Pending)
  createdAt           DateTime               @default(now())
  createdById         String
  updatedAt           DateTime               @updatedAt
  description         String                 @default("")
  expectedDate        DateTime               @default(now())
  cost                Decimal?               @db.Decimal(10, 2)
  prepTime            Int?
  shippingAmount      Decimal?               @db.Decimal(10, 2)
  quantity            Int                    @default(1)
  ink                 String?                @default("")
  workOrderItemNumber Int                    @default(autoincrement())
  deleted             Boolean                @default(false)
  paperProductId      String?
  productTypeId       String?
  shippingInfoId      String?
  ProcessingOptions   ProcessingOptions[]
  Typesetting         Typesetting[]
  createdBy           User                   @relation(fields: [createdById], references: [id])
  PaperProduct        PaperProduct?          @relation(fields: [paperProductId], references: [id])
  ProductType         ProductType?           @relation(fields: [productTypeId], references: [id])
  ShippingInfo        ShippingInfo?          @relation(fields: [shippingInfoId], references: [id])
  WorkOrder           WorkOrder?             @relation(fields: [workOrderId], references: [id])
  artwork             WorkOrderItemArtwork[]
  WorkOrderItemStock  WorkOrderItemStock[]
}

model WorkOrderItemArtwork {
  id              String        @id @default(cuid())
  workOrderItemId String
  fileUrl         String
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fileType        FileType      @default(Image)
  workOrderItem   WorkOrderItem @relation(fields: [workOrderItemId], references: [id])
}

model WorkOrderNote {
  id          String    @id @default(uuid())
  workOrderId String
  note        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model WorkOrderItemStock {
  id              String        @id @default(uuid())
  stockQty        Int
  costPerM        Decimal       @default(0) @db.Decimal(10, 2)
  totalCost       Decimal?      @db.Decimal(10, 2)
  from            String?
  expectedDate    DateTime?
  orderedDate     DateTime?
  received        Boolean       @default(false)
  receivedDate    DateTime?
  notes           String?
  stockStatus     StockStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workOrderItemId String
  createdById     String
  supplier        String?
  paperProductId  String?
  createdBy       User          @relation(fields: [createdById], references: [id])
  PaperProduct    PaperProduct? @relation(fields: [paperProductId], references: [id])
  WorkOrderItem   WorkOrderItem @relation(fields: [workOrderItemId], references: [id])
}

model WorkOrderVersion {
  id          String    @id @default(uuid())
  workOrderId String
  version     Int
  createdBy   String
  createdAt   DateTime  @default(now())
  WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model UsersOnOffices {
  userId     String
  officeId   String
  assignedAt DateTime @default(now())
  office     Office   @relation(fields: [officeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, officeId])
  @@index([officeId])
  @@index([userId])
}

enum AddressType {
  Billing
  Shipping
  Mailing
  Other
  Physical
}

enum BindingType {
  PerfectBound
  SaddleStitched
  CoilBound
  WireO
  Other
}

enum FileType {
  Image
  PDF
  Excel
  CSV
  Word
  RTF
  Other
  JPEG
  JPG
  PNG
  PSD
}

enum InvoicePrintEmailOptions {
  Print
  Email
  Both
}

enum InvoiceStatus {
  Draft
  Sent
  Paid
  Overdue
  Cancelled
}

enum OrderStatus {
  Cancelled
  Completed
  Invoiced
  PaymentReceived
  Pending
  Shipping
}

enum OrderItemStatus {
  Bindery
  Cancelled
  Completed
  Invoiced
  Pending
  Prepress
  Press
  Shipping
}

enum PaperBrand {
  BlazerDigital
  OmniluxOpaque
  Other
}

enum PaperType {
  Book
  Cover
  Other
}

enum PaperFinish {
  Gloss
  Satin
  Opaque
  Other
}

enum PaymentMethod {
  Cash
  Check
  CreditCard
  DebitCard
  PayPal
  Venmo
  Zelle
}

enum PaymentStatus {
  Paid
  Unpaid
  Partial
  Pending
  Overdue
  Refunded
}

enum PermissionName {
  CreateAddress
  CreateApiKey
  CreateCompany
  CreateInvitation
  CreateOffice
  CreateOrder
  CreateOrderItem
  CreatePasswordReset
  CreateProcessingOptions
  CreateRole
  CreateShippingInfo
  CreateTypesetting
  CreateUser
  CreateWorkOrder
  DeleteAddress
  DeleteApiKey
  DeleteCompany
  DeleteInvitation
  DeleteOffice
  DeleteOrder
  DeleteOrderItem
  DeletePasswordReset
  DeleteProcessingOptions
  DeleteRole
  DeleteShippingInfo
  DeleteTypesetting
  DeleteUser
  DeleteWorkOrder
  UpdateAddress
  UpdateApiKey
  UpdateCompany
  UpdateInvitation
  UpdateOffice
  UpdateOrder
  UpdateOrderItem
  UpdatePasswordReset
  UpdateProcessingOptions
  UpdateRole
  UpdateShippingInfo
  UpdateTypesetting
  UpdateUser
  UpdateWorkOrder
  InvoiceCreate
  InvoiceDelete
  InvoiceRead
}

enum ProofMethod {
  Digital
  HardCopy
  PDF
  Other
}

enum RoleName {
  Admin
  Bindery
  Customer
  Finance
  Manager
  Prepress
  Production
  Sales
  User
}

enum ShippingMethod {
  Courier
  Delivery
  DHL
  FedEx
  Other
  Pickup
  UPS
  USPS
}

enum ShippingType {
  Residential
  Commercial
  Other
}

enum StaticRoles {
  ADMIN
  BINDERY
  CUSTOMER
  FINANCE
  MANAGER
  PREPRESS
  PRODUCTION
  SALES
  USER
}

enum StockStatus {
  OnHand
  CS
  Ordered
}

enum TypesettingStatus {
  InProgress
  WaitingApproval
  Completed
}

enum WorkOrderItemStatus {
  Approved
  Cancelled
  Draft
  Pending
  Proofing
}

enum WorkOrderStatus {
  Approved
  Cancelled
  Draft
  Pending
}
