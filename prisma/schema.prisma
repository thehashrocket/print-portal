generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id              String         @id @default(uuid())
  officeId        String
  line1           String
  line2           String?
  city            String
  state           String
  zipCode         String
  country         String
  telephoneNumber String         @default("")
  addressType     AddressType    @default(Other)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Office          Office         @relation(fields: [officeId], references: [id])
  ShippingInfo    ShippingInfo[]
}

model Company {
  id      String   @id @default(uuid())
  name    String
  Offices Office[]
}

model Invoice {
  id              String           @id @default(uuid())
  invoiceNumber   String           @unique
  dateIssued      DateTime
  dateDue         DateTime
  subtotal        Decimal          @db.Decimal(10, 2)
  taxRate         Decimal          @db.Decimal(5, 2)
  taxAmount       Decimal          @db.Decimal(10, 2)
  total           Decimal          @db.Decimal(10, 2)
  status          InvoiceStatus    @default(Draft)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderId         String           @unique
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id])
  Order           Order            @relation(fields: [orderId], references: [id])
  InvoiceItems    InvoiceItem[]
  InvoicePayments InvoicePayment[]
}

model InvoiceItem {
  id          String     @id @default(uuid())
  description String     @default("")
  quantity    Int
  unitPrice   Decimal    @db.Decimal(10, 2)
  total       Decimal    @db.Decimal(10, 2)
  invoiceId   String
  orderItemId String?
  invoice     Invoice    @relation(fields: [invoiceId], references: [id])
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
}

model InvoicePayment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod PaymentMethod
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
}

model Office {
  id           String         @id @default(uuid())
  companyId    String
  name         String
  createdAt    DateTime       @default(now())
  createdById  String
  updatedAt    DateTime       @updatedAt
  Addresses    Address[]
  Company      Company        @relation(fields: [companyId], references: [id])
  createdBy    User           @relation("CreatedBy", fields: [createdById], references: [id])
  Orders       Order[]
  ShippingInfo ShippingInfo[]
  Users        User[]
  WorkOrders   WorkOrder[]
}

model Order {
  contactPerson     User                     @relation("OrderContactPerson", fields: [contactPersonId], references: [id])
  contactPersonId   String
  createdAt         DateTime                 @default(now())
  createdBy         User                     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdById       String
  dateInvoiced      DateTime?
  deposit           Decimal                  @default(0) @db.Decimal(10, 2)
  id                String                   @id @default(uuid())
  inHandsDate       DateTime?
  Invoice           Invoice?
  invoicePrintEmail InvoicePrintEmailOptions @default(Both)
  Office            Office                   @relation(fields: [officeId], references: [id])
  officeId          String
  OrderItems        OrderItem[]
  OrderNotes        OrderNote[]
  orderNumber       Int                      @default(autoincrement())
  pressRun          String?                  @default("")
  ShippingInfo      ShippingInfo?            @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId    String?
  status            OrderStatus              @default(Pending)
  updatedAt         DateTime                 @updatedAt
  version           Int                      @default(1)
  WorkOrder         WorkOrder                @relation(fields: [workOrderId], references: [id])
  workOrderId       String                   @unique
}

model OrderItem {
  amount              Decimal?            @db.Decimal(10, 2)
  artwork             OrderItemArtwork[]
  cost                Decimal?            @db.Decimal(10, 2)
  createdAt           DateTime            @default(now())
  createdBy           User                @relation(fields: [createdById], references: [id])
  createdById         String
  description         String              @default("")
  expectedDate        DateTime            @default(now())
  finishedQty         Int
  id                  String              @id @default(uuid())
  ink                 String?
  InvoiceItems        InvoiceItem[]
  Order               Order               @relation(fields: [orderId], references: [id])
  orderId             String
  OrderItemStock      OrderItemStock[]
  other               String?
  prepTime            Int?
  pressRun            String
  ProcessingOptions   ProcessingOptions[]
  quantity            Int                 @default(1)
  shippingAmount      Decimal?            @db.Decimal(10, 2)
  size                String?
  specialInstructions String?
  status              OrderItemStatus     @default(Pending)
  Typesetting         Typesetting[]
  updatedAt           DateTime            @updatedAt
}

model OrderItemArtwork {
  id          String    @id @default(cuid())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  fileUrl     String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderNote {
  id          String   @id @default(uuid())
  note        String
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  Order       Order    @relation(fields: [orderId], references: [id])
}

model OrderItemStock {
  costPerM     Decimal     @default(0) @db.Decimal(10, 2)
  createdAt    DateTime    @default(now())
  createdBy    User        @relation(fields: [createdById], references: [id])
  createdById  String
  expectedDate DateTime?
  from         String?
  id           String      @id @default(uuid())
  notes        String?
  orderedDate  DateTime?
  orderItemId  String
  OrderItem    OrderItem   @relation(fields: [orderItemId], references: [id])
  received     Boolean     @default(false)
  receivedDate DateTime?
  stockQty     Int
  stockStatus  StockStatus
  supplier     String?
  totalCost    Decimal?    @db.Decimal(10, 2)
  updatedAt    DateTime    @updatedAt
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String @default("")
  Roles       Role[] @relation("PermissionToRole")
}

// Bindery Options
model ProcessingOptions {
  id              String         @id @default(uuid())
  cutting         String?
  padding         String?
  drilling        String?
  folding         String?
  other           String?
  numberingStart  Int?
  numberingEnd    Int?
  numberingColor  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orderItemId     String?
  workOrderItemId String?
  createdById     String
  description     String         @default("")
  name            String
  stitching       String?
  binderyTime     Int?
  binding         BindingType?
  createdBy       User           @relation(fields: [createdById], references: [id])
  OrderItem       OrderItem?     @relation(fields: [orderItemId], references: [id])
  WorkOrderItem   WorkOrderItem? @relation(fields: [workOrderItemId], references: [id])
}

model Role {
  id          String       @id @default(uuid())
  name        RoleName     @unique
  description String       @default("")
  Permissions Permission[] @relation("PermissionToRole")
  Users       User[]       @relation("RoleToUser")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingInfo {
  Address            Address?         @relation(fields: [addressId], references: [id])
  addressId          String?
  attentionTo        String?
  createdAt          DateTime         @default(now())
  createdBy          User             @relation(fields: [createdById], references: [id])
  createdById        String
  estimatedDelivery  DateTime?
  id                 String           @id @default(uuid())
  instructions       String?
  numberOfPackages   Int?             @default(1)
  Office             Office           @relation(fields: [officeId], references: [id])
  officeId           String
  Order              Order[]
  shippingCost       Decimal?         @db.Decimal(10, 2)
  shippingDate       DateTime?
  shippingMethod     ShippingMethod
  shippingNotes      String?
  shippingOther      String?
  shipToSameAsBillTo Boolean          @default(false)
  trackingNumber     String?
  updatedAt          DateTime         @updatedAt
  WorkOrder          WorkOrder[]
  ShippingPickup     ShippingPickup[]
}

model ShippingPickup {
  contactName    String
  contactPhone   String
  createdAt      DateTime     @default(now())
  createdBy      User         @relation(fields: [createdById], references: [id])
  createdById    String
  id             String       @id @default(uuid())
  notes          String?
  pickupDate     DateTime
  pickupTime     String
  ShippingInfo   ShippingInfo @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId String
  updatedAt      DateTime     @updatedAt
}

model Typesetting {
  approved           Boolean             @default(false)
  cost               Decimal?            @db.Decimal(10, 2)
  createdAt          DateTime            @default(now())
  createdBy          User                @relation(fields: [createdById], references: [id])
  createdById        String
  dateIn             DateTime
  followUpNotes      String?
  id                 String              @id @default(uuid())
  OrderItem          OrderItem?          @relation(fields: [orderItemId], references: [id])
  orderItemId        String?
  plateRan           String?
  prepTime           Int?
  status             TypesettingStatus   @default(InProgress)
  timeIn             String
  TypesettingOptions TypesettingOption[]
  TypesettingProofs  TypesettingProof[]
  updatedAt          DateTime            @updatedAt
  WorkOrderItem      WorkOrderItem?      @relation(fields: [workOrderItemId], references: [id])
  workOrderItemId    String?
}

model TypesettingOption {
  id            String      @id @default(uuid())
  typesettingId String
  option        String
  selected      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  createdById   String
  updatedAt     DateTime    @updatedAt
  createdBy     User        @relation(fields: [createdById], references: [id])
  typesetting   Typesetting @relation(fields: [typesettingId], references: [id])

  @@unique([typesettingId, option])
}

model TypesettingProof {
  id            String      @id @default(uuid())
  typesettingId String
  proofNumber   Int
  dateSubmitted DateTime?
  notes         String?
  approved      Boolean?
  createdAt     DateTime    @default(now())
  createdById   String
  updatedAt     DateTime    @updatedAt
  proofCount    Int
  proofMethod   ProofMethod @default(Digital)
  createdBy     User        @relation(fields: [createdById], references: [id])
  Typesetting   Typesetting @relation(fields: [typesettingId], references: [id])
}

model User {
  id                      String               @id @default(cuid())
  name                    String?
  email                   String?              @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @default(now())
  officeId                String?
  accounts                Account[]
  Invoice                 Invoice[]
  CreatedOffices          Office[]             @relation("CreatedBy")
  OrderItem               OrderItem[]
  OrderItemStock          OrderItemStock[]
  OrderNote               OrderNote[]
  Posts                   Post[]
  ProcessingOptions       ProcessingOptions[]
  sessions                Session[]
  ShippingInfo            ShippingInfo[]
  Typesetting             Typesetting[]
  TypesettingOption       TypesettingOption[]
  TypesettingProof        TypesettingProof[]
  Office                  Office?              @relation(fields: [officeId], references: [id])
  WorkOrderItem           WorkOrderItem[]
  WorkOrderItemStock      WorkOrderItemStock[]
  WorkOrderNote           WorkOrderNote[]
  Roles                   Role[]               @relation("RoleToUser")
  CreatedOrders           Order[]              @relation("OrderCreatedBy")
  CreatedWorkOrders       WorkOrder[]          @relation("WorkOrderCreatedBy")
  ContactPersonOrders     Order[]              @relation("OrderContactPerson")
  ContactPersonWorkOrders WorkOrder[]          @relation("WorkOrderContactPerson")
  ShippingPickup          ShippingPickup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkOrder {
  id                  String                   @id @default(uuid())
  officeId            String
  dateIn              DateTime
  inHandsDate         DateTime
  estimateNumber      String
  purchaseOrderNumber String
  version             Int                      @default(autoincrement())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  workOrderNumber     Int                      @default(autoincrement())
  shippingInfoId      String?
  status              WorkOrderStatus          @default(Draft)
  invoicePrintEmail   InvoicePrintEmailOptions @default(Both)
  contactPersonId     String
  createdById         String
  Order               Order?
  createdBy           User                     @relation("WorkOrderCreatedBy", fields: [createdById], references: [id])
  Office              Office                   @relation(fields: [officeId], references: [id])
  ShippingInfo        ShippingInfo?            @relation(fields: [shippingInfoId], references: [id])
  WorkOrderItems      WorkOrderItem[]
  WorkOrderNotes      WorkOrderNote[]
  WorkOrderVersions   WorkOrderVersion[]
  contactPerson       User                     @relation("WorkOrderContactPerson", fields: [contactPersonId], references: [id])
}

model WorkOrderItem {
  amount              Decimal?               @db.Decimal(10, 2)
  artwork             WorkOrderItemArtwork[]
  cost                Decimal?               @db.Decimal(10, 2)
  createdAt           DateTime               @default(now())
  createdBy           User                   @relation(fields: [createdById], references: [id])
  createdById         String
  description         String                 @default("")
  expectedDate        DateTime               @default(now())
  id                  String                 @id @default(uuid())
  ink                 String?
  other               String?
  prepTime            Int?
  ProcessingOptions   ProcessingOptions[]
  quantity            Int                    @default(1)
  shippingAmount      Decimal?               @db.Decimal(10, 2)
  size                String?
  specialInstructions String?
  status              WorkOrderItemStatus    @default(Pending)
  Typesetting         Typesetting[]
  updatedAt           DateTime               @updatedAt
  WorkOrder           WorkOrder?             @relation(fields: [workOrderId], references: [id])
  workOrderId         String?
  WorkOrderItemStock  WorkOrderItemStock[]
}

model WorkOrderItemArtwork {
  id              String        @id @default(cuid())
  workOrderItem   WorkOrderItem @relation(fields: [workOrderItemId], references: [id])
  workOrderItemId String
  fileUrl         String
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model WorkOrderNote {
  id          String    @id @default(uuid())
  workOrderId String
  note        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model WorkOrderItemStock {
  costPerM        Decimal       @default(0) @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  createdBy       User          @relation(fields: [createdById], references: [id])
  createdById     String
  expectedDate    DateTime?
  from            String?
  id              String        @id @default(uuid())
  notes           String?
  orderedDate     DateTime?
  received        Boolean       @default(false)
  receivedDate    DateTime?
  stockQty        Int
  stockStatus     StockStatus
  supplier        String?
  totalCost       Decimal?      @db.Decimal(10, 2)
  updatedAt       DateTime      @updatedAt
  WorkOrderItem   WorkOrderItem @relation(fields: [workOrderItemId], references: [id])
  workOrderItemId String
}

model WorkOrderVersion {
  id          String    @id @default(uuid())
  workOrderId String
  version     Int
  createdBy   String
  createdAt   DateTime  @default(now())
  WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

enum AddressType {
  Billing
  Shipping
  Mailing
  Other
}

enum BindingType {
  PerfectBound
  SaddleStitched
  CoilBound
  WireO
  Other
}

enum InvoicePrintEmailOptions {
  Print
  Email
  Both
}

enum InvoiceStatus {
  Draft
  Sent
  Paid
  Overdue
  Cancelled
}

enum OrderStatus {
  Cancelled
  Completed
  Invoicing
  PaymentReceived
  Pending
  Shipping
}

enum OrderItemStatus {
  Bindery
  Cancelled
  Completed
  Pending
  Prepress
  Press
  Shipping
}

enum PaymentMethod {
  Cash
  Check
  CreditCard
  DebitCard
  PayPal
  Venmo
  Zelle
}

enum PaymentStatus {
  Paid
  Unpaid
  Partial
  Pending
  Overdue
  Refunded
}

enum PermissionName {
  CreateAddress
  CreateApiKey
  CreateCompany
  CreateInvitation
  CreateOffice
  CreateOrder
  CreateOrderItem
  CreatePasswordReset
  CreateProcessingOptions
  CreateRole
  CreateShippingInfo
  CreateTypesetting
  CreateUser
  CreateWorkOrder
  DeleteAddress
  DeleteApiKey
  DeleteCompany
  DeleteInvitation
  DeleteOffice
  DeleteOrder
  DeleteOrderItem
  DeletePasswordReset
  DeleteProcessingOptions
  DeleteRole
  DeleteShippingInfo
  DeleteTypesetting
  DeleteUser
  DeleteWorkOrder
  UpdateAddress
  UpdateApiKey
  UpdateCompany
  UpdateInvitation
  UpdateOffice
  UpdateOrder
  UpdateOrderItem
  UpdatePasswordReset
  UpdateProcessingOptions
  UpdateRole
  UpdateShippingInfo
  UpdateTypesetting
  UpdateUser
  UpdateWorkOrder
  InvoiceCreate
  InvoiceDelete
  InvoiceRead
}

enum ProofMethod {
  Digital
  HardCopy
  PDF
  Other
}

enum RoleName {
  Admin
  Bindery
  Customer
  Finance
  Manager
  Prepress
  Production
  Sales
  User
}

enum ShippingMethod {
  Courier
  Delivery
  DHL
  FedEx
  Other
  Pickup
  UPS
  USPS
}

enum ShippingType {
  Residential
  Commercial
  Other
}

enum StaticRoles {
  ADMIN
  BINDERY
  CUSTOMER
  FINANCE
  MANAGER
  PREPRESS
  PRODUCTION
  SALES
  USER
}

enum StockStatus {
  OnHand
  CS
  Ordered
}

enum TypesettingStatus {
  InProgress
  WaitingApproval
  Completed
}

enum WorkOrderItemStatus {
  Approved
  Cancelled
  Draft
  Pending
  Proofing
}

enum WorkOrderStatus {
  Approved
  Cancelled
  Draft
  Pending
}
