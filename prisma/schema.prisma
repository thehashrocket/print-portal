generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Address {
    id              String         @id @default(uuid())
    officeId        String
    line1           String
    line2           String?
    city            String
    state           String
    zipCode         String
    country         String
    telephoneNumber String         @default("")
    addressType     AddressType    @default(Other)
    Office          Office         @relation(fields: [officeId], references: [id])
    ShippingInfo    ShippingInfo[]
}

model Company {
    id      String   @id @default(uuid())
    name    String
    Offices Office[]
}

model Office {
    id           String         @id @default(uuid())
    companyId    String
    name         String
    Addresses    Address[]
    Company      Company        @relation(fields: [companyId], references: [id])
    Orders       Order[]
    ShippingInfo ShippingInfo[]
    users        User[]
    WorkOrders   WorkOrder[]
}

model Order {
    approved            Boolean             @default(false)
    artwork             String?
    binderyTime         String?
    costPerM            Decimal?            @db.Decimal(10, 2)
    createdAt           DateTime            @default(now())
    deposit             Decimal?            @db.Decimal(10, 2)
    description         String?
    expectedDate        DateTime?
    id                  String              @id @default(uuid())
    Office              Office              @relation(fields: [officeId], references: [id])
    officeId            String
    OrderItems          OrderItem[]
    OrderNotes          OrderNote[]
    orderNumber         Int                 @default(autoincrement())
    OrderStock          OrderStock[]
    overUnder           String?
    plateRan            String?
    prepTime            Int?
    pressRun            String
    ProcessingOptions   ProcessingOptions[]
    proofCount          Int                 @default(0)
    proofType           String?
    ShippingInfo        ShippingInfo        @relation(fields: [shippingInfoId], references: [id])
    shippingInfoId      String
    specialInstructions String?
    status              OrderStatus         @default(Pending)
    totalCost           Decimal?            @db.Decimal(10, 2)
    Typesetting         Typesetting[]
    updatedAt           DateTime            @default(now())
    User                User                @relation(fields: [userId], references: [id])
    userId              String
    version             Int                 @default(1)
    WorkOrder           WorkOrder           @relation(fields: [workOrderId], references: [id])
    workOrderId         String              @unique
}

model OrderItem {
    id           String   @id @default(uuid())
    orderId      String
    description  String
    finishedQty  Int
    pressRun     String
    cs           String
    size         String?
    stockOnHand  Boolean  @default(false)
    stockOrdered String?
    inkColor     String?
    amount       Decimal? @db.Decimal(10, 2)
    quantity     Int      @default(1)
    cutting      String?
    drilling     String?
    folding      String?
    other        String?
    Order        Order    @relation(fields: [orderId], references: [id])
}

model OrderNote {
    id        String   @id @default(uuid())
    note      String
    orderId   String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order    @relation(fields: [orderId], references: [id])
    User      User     @relation(fields: [userId], references: [id])
}

model OrderStock {
    id           String      @id @default(uuid())
    orderId      String
    stockQty     Int
    costPerM     Decimal?    @db.Decimal(10, 2)
    totalCost    Decimal?    @db.Decimal(10, 2)
    from         String?
    expectedDate DateTime?
    orderedDate  DateTime?
    received     Boolean     @default(false)
    receivedDate DateTime?
    notes        String?
    stockStatus  StockStatus
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    Order        Order       @relation(fields: [orderId], references: [id])
}

model Permission {
    id          String  @id @default(uuid())
    name        String  @unique
    description String?
    Roles       Role[]  @relation("PermissionToRole")
}

model ProcessingOptions {
    id             String     @id @default(uuid())
    workOrderId    String?
    orderId        String?
    cutting        Boolean    @default(false)
    padding        Boolean    @default(false)
    drilling       Boolean    @default(false)
    folding        Boolean    @default(false)
    other          String?
    numberingStart Int?
    numberingEnd   Int?
    numberingColor String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    Order          Order?     @relation(fields: [orderId], references: [id])
    WorkOrder      WorkOrder? @relation(fields: [workOrderId], references: [id])
}

model Role {
    id          String       @id @default(uuid())
    name        RoleName     @unique
    description String?
    Permissions Permission[] @relation("PermissionToRole")
    Users       User[]       @relation("RoleToUser")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingInfo {
    id                 String         @id @default(uuid())
    instructions       String?
    shippingOther      String?
    shippingDate       DateTime?
    shippingMethod     ShippingMethod
    shippingCost       Decimal?       @db.Decimal(10, 2)
    officeId           String
    shipToSameAsBillTo Boolean        @default(false)
    attentionTo        String?
    addressId          String?
    Order              Order[]
    Address            Address?       @relation(fields: [addressId], references: [id])
    Office             Office         @relation(fields: [officeId], references: [id])
    WorkOrder          WorkOrder[]
}

model Typesetting {
    id                 String              @id @default(uuid())
    workOrderId        String
    orderId            String?
    dateIn             DateTime
    timeIn             String
    cost               Decimal?            @db.Decimal(10, 2)
    approved           Boolean             @default(false)
    prepTime           Int?
    plateRan           String?
    Order              Order?              @relation(fields: [orderId], references: [id])
    WorkOrder          WorkOrder           @relation(fields: [workOrderId], references: [id])
    TypesettingOptions TypesettingOption[]
    TypesettingProofs  TypesettingProof[]
}

model TypesettingOption {
    id            String      @id @default(uuid())
    typesettingId String
    option        String
    selected      Boolean     @default(false)
    typesetting   Typesetting @relation(fields: [typesettingId], references: [id])

    @@unique([typesettingId, option])
}

model TypesettingProof {
    id            String      @id @default(uuid())
    typesettingId String
    proofNumber   Int
    dateSubmitted DateTime?
    notes         String?
    approved      Boolean?
    Typesetting   Typesetting @relation(fields: [typesettingId], references: [id])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now())
    officeId      String?
    accounts      Account[]
    Order         Order[]
    OrderNote     OrderNote[]
    Posts         Post[]
    sessions      Session[]
    Office        Office?         @relation(fields: [officeId], references: [id])
    WorkOrders    WorkOrder[]
    WorkOrderNote WorkOrderNote[]
    Roles         Role[]          @relation("RoleToUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WorkOrder {
    id                  String              @id @default(uuid())
    officeId            String
    dateIn              DateTime
    inHandsDate         DateTime
    estimateNumber      String
    purchaseOrderNumber String
    pressRun            String
    specialInstructions String?
    artwork             String?
    approved            Boolean             @default(false)
    prepTime            Int?
    plateRan            String?
    expectedDate        DateTime?
    deposit             Decimal             @default(0) @db.Decimal(10, 2)
    costPerM            Decimal             @default(0) @db.Decimal(10, 2)
    totalCost           Decimal?            @db.Decimal(10, 2)
    binderyTime         String?
    overUnder           String?
    userId              String
    version             Int                 @default(autoincrement())
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    description         String?
    workOrderNumber     Int                 @default(autoincrement())
    shippingInfoId      String
    status              WorkOrderStatus     @default(Draft)
    Order               Order?
    ProcessingOptions   ProcessingOptions[]
    Typesetting         Typesetting[]
    Office              Office              @relation(fields: [officeId], references: [id])
    ShippingInfo        ShippingInfo        @relation(fields: [shippingInfoId], references: [id])
    User                User                @relation(fields: [userId], references: [id])
    WorkOrderItems      WorkOrderItem[]
    WorkOrderNotes      WorkOrderNote[]
    WorkOrderStock      WorkOrderStock[]
    WorkOrderVersions   WorkOrderVersion[]
}

model WorkOrderItem {
    id           String    @id @default(uuid())
    workOrderId  String
    cutting      String?
    description  String?
    drilling     String?
    finishedQty  Int?
    folding      String?
    other        String?
    pressRun     String?
    cs           String?
    size         String?
    stockOnHand  Boolean   @default(false)
    stockOrdered String?
    inkColor     String?
    amount       Decimal?  @db.Decimal(10, 2)
    quantity     Int       @default(1)
    WorkOrder    WorkOrder @relation(fields: [workOrderId], references: [id])
}

model WorkOrderNote {
    id          String    @id @default(uuid())
    workOrderId String
    note        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    userId      String
    User        User      @relation(fields: [userId], references: [id])
    WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

model WorkOrderStock {
    id           String      @id @default(uuid())
    workOrderId  String
    stockQty     Int
    costPerM     Decimal?    @db.Decimal(10, 2)
    totalCost    Decimal?    @db.Decimal(10, 2)
    from         String?
    expectedDate DateTime?
    orderedDate  DateTime?
    received     Boolean     @default(false)
    receivedDate DateTime?
    notes        String?
    stockStatus  StockStatus
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    WorkOrder    WorkOrder   @relation(fields: [workOrderId], references: [id])
}

model WorkOrderVersion {
    id          String    @id @default(uuid())
    workOrderId String
    version     Int
    createdBy   String
    createdAt   DateTime  @default(now())
    WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
}

enum AddressType {
    Billing
    Shipping
    Mailing
    Other
}

enum RoleName {
    Admin
    Bindery
    Customer
    Finance
    Manager
    Prepress
    Production
    Sales
    User
}

enum OrderStatus {
    Bindery
    Cancelled
    Completed
    Invoicing
    PaymentReceived
    Pending
    Prepress
    Press
    Shipping
}

enum WorkOrderStatus {
    Approved
    Cancelled
    Draft
    Proofing
}

enum PaymentMethod {
    Cash
    Check
    CreditCard
    DebitCard
    PayPal
    Venmo
    Zelle
}

enum PaymentStatus {
    Paid
    Unpaid
    Partial
    Pending
    Overdue
    Refunded
}

enum PermissionName {
    CreateAddress
    CreateApiKey
    CreateCompany
    CreateInvitation
    CreateOffice
    CreateOrder
    CreateOrderItem
    CreatePasswordReset
    CreateProcessingOptions
    CreateRole
    CreateShippingInfo
    CreateTypesetting
    CreateUser
    CreateWorkOrder
    DeleteAddress
    DeleteApiKey
    DeleteCompany
    DeleteInvitation
    DeleteOffice
    DeleteOrder
    DeleteOrderItem
    DeletePasswordReset
    DeleteProcessingOptions
    DeleteRole
    DeleteShippingInfo
    DeleteTypesetting
    DeleteUser
    DeleteWorkOrder
    UpdateAddress
    UpdateApiKey
    UpdateCompany
    UpdateInvitation
    UpdateOffice
    UpdateOrder
    UpdateOrderItem
    UpdatePasswordReset
    UpdateProcessingOptions
    UpdateRole
    UpdateShippingInfo
    UpdateTypesetting
    UpdateUser
    UpdateWorkOrder
}

enum ProofType {
    Digital
    HardCopy
    PDF
    Other
}

enum ShippingMethod {
    Courier
    Deliver
    DHL
    FedEx
    Other
    UPS
    USPS
}

enum ShippingType {
    Residential
    Commercial
    Other
}

enum StaticRoles {
    ADMIN
    BINDERY
    CUSTOMER
    FINANCE
    MANAGER
    PREPRESS
    PRODUCTION
    SALES
    USER
}

enum StockStatus {
    InStock
    OnHand
    CS
    Ordered
    OutOfStock
    LowStock
}
